type Tournament{
    tournamentId: ID!
    name: String!
    tournamentStatus: ETournamentStatus!
    game: Game!
    participants: [Participant]
    owner: User!
    teamSize: Int
    prizeInUsd: Int
    winner: Participant

}

enum ETournamentStatus{
    NEW,
    LIVE,
    COMPLETE
}

input CreateTournamentInput{
    tournamentId: String
    ownerId: String!
    gameId: String!
    name: String!
    teamSize: Int
}

input UpdateTournamentInput{
    tournamentId: ID!
    name: String
    status: ETournamentStatus
    winnerId: String
}

type DeleteTournamentPayload{
    tournamentId: ID!
}

extend type Query {
    getTournaments:[Tournament]

}

extend type Mutation {
    createTournament(request: CreateTournamentInput!): Tournament!
    updateTournament(request: UpdateTournamentInput!): Tournament!
    deleteTournament(id: String!): DeleteTournamentPayload!
}
